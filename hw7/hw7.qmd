---
title: Homework 7 - Creating a resume database
author: Yonathan Menberu
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-OrganicCompiler/tree/main>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
  'user': "CMSC508_USER",
  'password': "CMSC508_PASSWORD",
  'host': "CMSC508_HOST",
  'database': "HW7_DB_NAME"
}

# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
if flag:
    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description
This document outlines the setup and usage of a database for managing resumes. The document includes a GitHub URL for accessing the repository. Within this document, Python scripts are used for establishing a database connection, checking databases, and providing sample queries. It also incorporates a Crows-Foot Diagram (Entity-Relationship Diagram) illustrating the relationships between tables (PEOPLE, ROLES, SKILLS, PEOPLEROLES, and PEOPLESKILLS). The document further details the structure and sample data of each table (People, Skills, Roles) and concludes with sample SQL queries to interact with the database. The aim of the project is to create a comprehensive database for managing resume-related information, allowing users to query and retrieve data efficiently.

## Crows-Foot Diagram
This Entity-Relationship Diagram (ERD) outlines the connections between five tables: PEOPLE, ROLES, SKILLS, PEOPLEROLES, and PEOPLESKILLS. It reflects relationships where people can acquire skills (PEOPLESKILLS), hold roles (PEOPLEROLES), and various roles are associated with people. The PEOPLE table contains personal details, ROLES represents roles, and SKILLS stores information about different skills. Connecting lines show how these entities relate, with notations indicating the nature of these connections, such as people acquiring skills and holding roles.

```{mermaid}
erDiagram
    PEOPLE {
        int id PK
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        string date_joined
    }

    PEOPLEROLES {
        int id PK
        int people_id FK
        int role_id FK
        string date_assigned
    }

    PEOPLESKILLS {
        int id PK
        int skill_id FK
        int people_id FK
        string date_acquired
    }

    ROLES {
        int id PK
        string name
        inr sort_priority
    }

    SKILLS {
        int id PK
        string name
        string description
        string tag
        string url
        string time_commitment
    }

    SKILLS ||--|{ PEOPLESKILLS: uses
    PEOPLE ||--o{ PEOPLESKILLS: acquires

    PEOPLE ||--|{ PEOPLEROLES: holds
    ROLES ||--|{ PEOPLEROLES: has
```

## Data in the Users Database

### People table

The *people* table contains elements that describe individuals. Each person is identified by a unique integer ID, and their last name is a required field, ensuring that it cannot be null. Other optional details include the person's first name, email, LinkedIn URL, headshot URL, Discord handle, and a brief biography. These details allow for a comprehensive representation of an individual's profile. Additionally, the table records the date when each person joined, with this date being a mandatory field to ensure completeness in tracking the timeline of individuals' memberships or affiliations.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe information related to various skills. Each skill is uniquely identified by an integer ID. The fields of name, description, and tag are mandatory, ensuring that they cannot be null. The "name" field represents the title or name of the skill, "description" provides a detailed explanation of the skill, and "tag" categorizes the skill into a specific grouping. Optional details include a URL for additional resources related to the skill and an indication of the time commitment required to acquire or master the skill. The "url" and "time_commitment" fields are allowed to default to null, providing flexibility in recording supplementary information about the skill.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe different roles or positions. Each role is uniquely identified by an integer ID. The fields of "name" and "sort_priority" are mandatory, ensuring that they cannot be null. The "name" field represents the title or name of the role, providing a descriptive label for the role. The "sort_priority" field is an integer used to establish an order for sorting roles, allowing for a structured arrangement of roles based on their priority or significance. This table facilitates the organization and categorization of distinct roles within a system or organization.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

### List skill names, tags, and descriptions ordered by name
```{python}
sql = f"""
SELECT name, tag, description
FROM skills
ORDER BY name;
"""
df = pd.read_sql(sql,cnx)
df
```

### List people names and email addresses ordered by last_name
```{python}
sql = f"""
SELECT first_name, last_name, email
FROM people
ORDER BY last_name;
"""
df = pd.read_sql(sql,cnx)
df
```

### List skill names of Person 1
```{python}
sql = f"""
SELECT skills.name
FROM peopleskills
JOIN skills ON peopleskills.skill_id = skills.id
WHERE peopleskills.people_id = 1;
"""
df = pd.read_sql(sql,cnx)
df
```

### List people names with Skill 6
```{python}
sql = f"""
SELECT people.first_name, people.last_name
FROM peopleskills
JOIN skills ON peopleskills.skill_id = skills.id
JOIN people ON peopleskills.people_id = people.id
WHERE skills.id = 6;
"""
df = pd.read_sql(sql,cnx)
df
```

### List people with a DEVELOPER role
```{python}
sql = f"""
SELECT people.first_name, people.last_name
FROM peopleroles
JOIN roles ON peopleroles.role_id = roles.id
JOIN people ON peopleroles.people_id = people.id
WHERE roles.name = 'DEVELOPER';
"""
df = pd.read_sql(sql,cnx)
df
```

### List names and email addresses of people without skills
```{python}
sql = f"""
SELECT first_name, last_name, email
FROM people
WHERE id NOT IN (SELECT DISTINCT people_id FROM peopleskills);
"""
df = pd.read_sql(sql,cnx)
df
```

### List names and tags of unused skills

```{python}
sql = f"""
SELECT name, tag
FROM skills
WHERE id NOT IN (SELECT DISTINCT skill_id FROM peopleskills);
"""
df = pd.read_sql(sql,cnx)
df
```

### List people names and skill names with the BOSS role
```{python}
sql = f"""
SELECT people.first_name, people.last_name, skills.name as skill_name
FROM peopleroles
JOIN roles ON peopleroles.role_id = roles.id
JOIN people ON peopleroles.people_id = people.id
LEFT JOIN peopleskills ON peopleroles.people_id = peopleskills.people_id
LEFT JOIN skills ON peopleskills.skill_id = skills.id
WHERE roles.name = 'BOSS';
"""
df = pd.read_sql(sql,cnx)
df
```

### List ids and names of unused roles
```{python}
sql = f"""
SELECT id, name
FROM roles
WHERE id NOT IN (SELECT DISTINCT role_id FROM peopleroles);
"""
df = pd.read_sql(sql,cnx)
df
```

## Reflection
While doing this assignment I noticed how my understanding of relational algebra from the previous chapters in this course made it easier to write the MySQL quires to retrive information. I was also able to gain a more comprehensive understanding of joins. 
A insight I had while doing this assignment was how to make a quick observation as to the cardinality of a relationship between entities. For instance, I noticed that the people_id attribute in peopleroles and peopleskills was not unique for each row and was able to deduce that this implied a 1 to many relationship with people to peopleroles/peopleskils.  
Overall this assignment was fun and a good assignment to increase my MySQL profiency.  